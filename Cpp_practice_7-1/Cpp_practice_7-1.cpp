// Cpp_practice_7-1.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <windows.h>

using namespace std;
/*Для тестирования структуры Distance в методе Main класса Program:
− определите три переменные типа Distance и две из них инициализируйте 
с помощью значений, вводимых с клавиатуры.
− присвойте третьей переменной значение суммы первых двух переменных 
(при реализации операции сложения пока не учитывайте, что один фут 
равен 12 дюймам, это будет сделано в следующей работе) и выведите 
результат на экран.
1. Создайте новое приложение и добавьте файл исходного кода.
2. До функции main()объявите структуру Distance, представляющую 
расстояние в английской системе мер, поля структуры – футы и дюймы:*/

struct Distance
{
    int feet;
    double inches;
  //  10.Перенесите определение функции ShowDist() в структуру :
    void ShowDist()
    {
        cout << feet << "\'-" << inches << "\"\n";
    }

};
/*3. После объявления структуры добавьте функцию сложения двух 
переменных типа Distance, при этом реализуйте возможность увеличения 
числа футов при переполнении дюймов:*/

Distance AddDist(const Distance& d1, const Distance& d2)
{
    Distance d;
    d.feet = d1.feet + d2.feet;
    d.inches = d1.inches + d2.inches;
    if (d.inches >= 12.0)
    {
        d.inches -= 12.0;
        d.feet++;
    }
    return d;
}
/*Добавьте функцию для ввода значений футов и дюймов:*/

Distance InputDist()
{
    Distance d;
    cout << "\nВведите число футов: ";
    cin >> d.feet;
    cout << "Введите число дюймов: ";
    cin >> d.inches;
    return d;
}
/*5. Добавьте еще одну функцию – вывод информации о переменной
структуры :*/

//void ShowDist(Distance d)
//{
//    cout << d.feet << "\'-" << d.inches << "\"\n";
//}


int main()
{
    setlocale(LC_ALL, "Russian");
    /*В функции main() объявите переменную типа Distance и для ее 
инициализации вызовите требуемую функцию, затем объявите вторую 
переменную с одновременной инициализацией:*/
    Distance d1 = InputDist();
    Distance d2 = { 1, 6.25 };

    /*Объявите третью переменную типа Distance и присвойте ей результат 
сложения двух первых переменных, используя функцию AddDist:*/
    Distance d3 = AddDist(d1, d2);
    //ShowDist(d1);
    //ShowDist(d2);
    //ShowDist(d3);
    d1.ShowDist();
    d2.ShowDist();
    d3.ShowDist();
    /*1. В конце функции main() объявите переменную – размер массива и 
запросите ее значение с клавиатуры:*/
int n;
cout << "Введите размер массива расстояний " ;
cin >> n;
/*2. Объявите динамический массив переменных типа Distance:*/
Distance * masDist = new Distance[n];
/*3. В цикле реализуйте вызов функции ввода значений футов и дюймов для 
каждого элемента массива:*/
for (int i = 0; i<n; i++)
{
masDist[i] = InputDist();
}
/*4. Также в цикле реализуйте вызов функции вывода значений на экран для
каждого элемента массива*/
for (int i = 0; i<n; i++)
{
//ShowDist(masDist[i]);
masDist[i].ShowDist();
}
//Реализуйте в программе подсчет и вывод на экран суммы всех расстояний, 
//входящих в массив.
Distance dsum = masDist[0];
for (int i = 1; i < n; i++)
{
    dsum = AddDist(dsum, masDist[i]);
}
cout << "Сумма всех расстояний: ";
dsum.ShowDist();

/*5. Укажите оператор высвобождения памяти, занимаемой массивом:*/
delete[] masDist;
        return 0;
}
